def define_model_bilstm(model_params: dict):
    input_block = tf.keras.layers.Input(shape=(model_params['window_size'],
        model_params['output_sequence_length']), dtype=tf.int32, name=
        'input_block')
    x = tf.keras.layers.TimeDistributed(layer=tf.keras.layers.Embedding(
        input_dim=len(vectorizer.get_vocabulary()), output_dim=model_params
        ['embedding_dimension'], mask_zero=True, name='embed'))(input_block)
    x = tf.keras.layers.TimeDistributed(tf.keras.layers.Bidirectional(tf.
        keras.layers.LSTM(units=model_params['bilstm_0_units'],
        return_sequences=True, name='BiLSTM_0')))(x)
    x = tf.keras.layers.TimeDistributed(tf.keras.layers.Bidirectional(tf.
        keras.layers.LSTM(units=model_params['bilstm_1_units'],
        return_sequences=False, name='BiLSTM_1')))(x)
    x = tf.keras.layers.Dense(units=model_params['dense_0_units'],
        activation='relu', name='Dense_0')(x)
    x = tf.keras.layers.Dropout(rate=model_params['drop_0_rate'], name='Drop_0'
        )(x)
    x = tf.keras.layers.Dense(units=model_params['dense_1_units'],
        activation='relu', name='Dense_1')(x)
    x = tf.keras.layers.Dense(units=3, activation='softmax', name='dense_final'
        )(x)
    model = tf.keras.models.Model(inputs=input_block, outputs=x[:, (1)])
    model.compile(optimizer=tf.keras.optimizers.Adam(model_params[
        'initial_lr']), loss=tf.keras.losses.SparseCategoricalCrossentropy(
        ), metrics=['accuracy'])
    return model
